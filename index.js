"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const common_1 = require("./common");
const packer_1 = require("./packer");
const reducers_1 = require("./reducers");
const vortex_api_1 = require("vortex-api");
const util_1 = require("./util");
const migrations_1 = require("./migrations");
const NATIVES_DIR = 'natives' + path_1.default.sep;
const LUA_EXT = '.lua';
const PAK_EXT = '.pak';
const STEAM_ID = '1446780';
function findGame() {
    return vortex_api_1.util.steam.findByAppId(STEAM_ID)
        .then(game => game.gamePath);
}
function queryREFramework(api) {
    const state = api.getState();
    const dinput = Object.values(state.persistent.mods[common_1.GAME_ID])
        .find(mod => mod.type === 'dinput');
    if (dinput !== undefined) {
        return Promise.resolve();
    }
    return new Promise((resolve) => api.showDialog('info', 'Soft requirement: REFramework', {
        text: 'Many mods for Monster Hunter Rise (mods that include lua scripts) '
            + 'require the mod REFramework to be installed in order to function correctly. '
            + 'You can download it from the Nexus Mods website by clicking the Vortex button '
            + 'in the top right corner. Once installed, please ensure it is enabled and deployed at all times.',
    }, [
        { label: 'Continue' },
        {
            label: 'Go to Mod Page',
            action: () => vortex_api_1.util.opn('https://www.nexusmods.com/monsterhunterrise/mods/26')
                .catch(err => null)
        },
    ]).then(() => resolve()));
}
function prepareForModding(api, discovery, packer) {
    return packer.ensurePacker()
        .then(() => vortex_api_1.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, 'natives')))
        .then(() => vortex_api_1.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, 'reframework', 'autorun')))
        .then(() => queryREFramework(api));
}
function testSupportedPAK(files, gameId) {
    const supported = (gameId === common_1.GAME_ID)
        && (files.find(file => path_1.default.extname(file) === PAK_EXT) !== undefined);
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
function installPAK(api, files, packer) {
    const paks = files.filter(file => path_1.default.extname(file) === PAK_EXT);
    return bluebird_1.default.map(paks, file => packer.getNextPatch(api)
        .then((patch) => {
        const destination = path_1.default.basename(file).match(/re_chunk_000.pak.patch_[0-9]*.pak/gm) !== null
            ? path_1.default.basename(file)
            : `re_chunk_000.pak.patch_${patch}.pak`;
        return bluebird_1.default.resolve(({
            type: 'copy',
            source: file,
            destination,
        }));
    }))
        .then(instructions => Promise.resolve({ instructions }));
}
function testSupportedLUA(files, gameId) {
    const supported = (gameId === common_1.GAME_ID)
        && (files.find(file => path_1.default.extname(file) === LUA_EXT) !== undefined);
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
function installLUA(files) {
    const modTypeInstruction = {
        type: 'setmodtype',
        value: 'mhr-lua-mod',
    };
    const luaInstructions = files.filter(file => path_1.default.extname(file) === LUA_EXT)
        .map(file => {
        const segments = file.split(path_1.default.sep);
        const idx = segments.findIndex(seg => seg.toLowerCase() === 'autorun');
        const destination = (idx !== -1)
            ? segments.slice(idx).join(path_1.default.sep)
            : path_1.default.join('autorun', path_1.default.basename(file));
        return {
            type: 'copy',
            source: file,
            destination,
        };
    });
    const otherFiles = files.filter(file => path_1.default.extname(file) !== LUA_EXT
        && path_1.default.extname(file) !== '')
        .map(file => ({
        type: 'copy',
        source: file,
        destination: file,
    }));
    const instructions = [].concat(modTypeInstruction, luaInstructions, otherFiles);
    return Promise.resolve({ instructions });
}
function testSupportedLoose(files, gameId) {
    const supported = (gameId === common_1.GAME_ID)
        && (files.find(file => file.indexOf(NATIVES_DIR) !== -1) !== undefined);
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
function installLoose(files, destinationPath, gameId, progressDelegate) {
    return __awaiter(this, void 0, void 0, function* () {
        const rootPath = files.find(file => file.endsWith(NATIVES_DIR));
        const idx = rootPath.length - NATIVES_DIR.length;
        let filtered = files.filter(file => ((file.indexOf(rootPath) !== -1)
            && (!file.endsWith(path_1.default.sep))));
        filtered = filtered.map(file => {
            return {
                source: file,
                destination: file.substr(idx),
            };
        });
        const modTypeInstruction = {
            type: 'setmodtype',
            value: 'mhr-loose-files',
        };
        const instructions = [modTypeInstruction].concat(filtered.map(file => {
            return {
                type: 'copy',
                source: file.source,
                destination: file.destination.toLowerCase(),
            };
        }));
        return Promise.resolve({ instructions });
    });
}
function main(context) {
    context.registerReducer(['settings', common_1.GAME_ID], reducers_1.reducer);
    const isMHR = (gameId = undefined) => {
        if (gameId !== undefined) {
            return (gameId === common_1.GAME_ID);
        }
        const state = context.api.getState();
        const gameMode = vortex_api_1.selectors.activeGameId(state);
        return (gameMode === common_1.GAME_ID);
    };
    const packer = new packer_1.PackerMod(context.api);
    context.registerGame({
        id: common_1.GAME_ID,
        name: 'Monster Hunter Rise',
        compatible: { usvfs: false },
        logo: 'gameart.jpg',
        mergeMods: true,
        queryPath: findGame,
        queryModPath: () => '.',
        executable: () => 'MonsterHunterRise.exe',
        requiredFiles: ['MonsterHunterRise.exe', common_1.GAME_PAK_FILE],
        environment: {
            SteamAPPId: STEAM_ID.toString(),
        },
        setup: (discovery) => prepareForModding(context.api, discovery, packer),
    });
    context.registerMigration(old => (0, migrations_1.migrate102)(context, old));
    context.registerInstaller('mhr-pak-mod', 25, testSupportedPAK, (files) => installPAK(context.api, files, packer));
    context.registerInstaller('mhr-loose-files-installer', 25, testSupportedLoose, installLoose);
    context.registerInstaller('mhr-lua-installer', 25, testSupportedLUA, installLUA);
    context.registerModType('mhr-loose-files', 25, isMHR, () => undefined, () => bluebird_1.default.resolve(false), { name: 'Loose Files' });
    context.registerModType('mhr-packer', 25, isMHR, () => undefined, () => bluebird_1.default.resolve(false), { name: 'Packer (Do not use)' });
    context.registerModType('mhr-lua-mod', 25, isMHR, () => {
        const state = context.api.getState();
        const discovery = vortex_api_1.selectors.discoveryByGame(state, common_1.GAME_ID);
        return path_1.default.join(discovery.path, 'reframework');
    }, () => bluebird_1.default.resolve(false), { name: 'Lua Mod' });
    context.once(() => {
        context.api.onAsync('will-deploy', (profileId, deployment) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const state = context.api.getState();
            const profile = state.persistent.profiles[profileId];
            if ((profile === null || profile === void 0 ? void 0 : profile.gameId) !== common_1.GAME_ID) {
                return;
            }
            const mods = state.persistent.mods[common_1.GAME_ID];
            if (mods === undefined) {
                return;
            }
            const looseMods = Object.values(mods).filter(mod => mod.type === 'mhr-loose-files');
            if (looseMods.length === 0) {
                return;
            }
            const packerMod = (_a = Object.values(mods).filter(mod => mod.type === 'mhr-packer')) === null || _a === void 0 ? void 0 : _a[0];
            if (packerMod === undefined) {
                return;
            }
            const stagingFolder = vortex_api_1.selectors.installPathForGame(state, common_1.GAME_ID);
            const modFiles = yield looseMods.reduce((accumP, iter) => __awaiter(this, void 0, void 0, function* () {
                let accum = yield accumP;
                const modPath = path_1.default.join(stagingFolder, iter.installationPath);
                const files = yield (0, util_1.walkDirPath)(modPath);
                accum = accum.concat(files.filter(file => path_1.default.extname(file.filePath) !== '')
                    .map(file => file.filePath));
                return accum;
            }), Promise.resolve([]));
            const copiedFiles = [];
            for (let file of modFiles) {
                const relPath = path_1.default.relative(stagingFolder, file)
                    .split(path_1.default.sep)
                    .slice(1)
                    .join(path_1.default.sep);
                const dest = path_1.default.join(stagingFolder, packerMod.installationPath, relPath);
                yield vortex_api_1.fs.ensureDirWritableAsync(path_1.default.dirname(dest));
                yield vortex_api_1.fs.linkAsync(file, dest).catch(err => null);
                copiedFiles.push(dest);
            }
            try {
                const pakFile = yield packer.runPacker();
                copiedFiles.push(pakFile);
                const mergedModName = 'mergedPak';
                const dest = path_1.default.join(stagingFolder, mergedModName, path_1.default.basename(pakFile));
                yield vortex_api_1.fs.removeAsync(dest).catch(err => null);
                yield packer.createMergedMod(mergedModName);
                yield vortex_api_1.fs.linkAsync(pakFile, dest).catch(err => null);
            }
            catch (err) {
                context.api.showErrorNotification('Failed to merge loose files', err);
            }
            for (let file of copiedFiles) {
                yield vortex_api_1.fs.removeAsync(file);
            }
        }));
    });
}
exports.default = main;
//# sourceMappingURL=data:application/json;base64,